S = FUNDEFS
FUNDEFS = FUNDEF FUNDEFS
        | ε

FUNDEF = SYM_IDENTIFIER SYM_LPAREN PARAMS SYM_RPAREN BLOCK

PARAMS = SYM_IDENTIFIER REST_PARAMS
       | ε

REST_PARAMS = SYM_COMMA SYM_IDENTIFIER REST_PARAMS
            | ε

BLOCK = SYM_LBRACE STATEMENTS SYM_RBRACE

STATEMENTS = STATEMENT STATEMENTS
           | ε

STATEMENT = ASSIGNMENT SYM_SEMICOLON
          | CONDITIONAL
          | BLOCK
          | SYM_RETURN EXPR SYM_SEMICOLON
          | SYM_PRINT EXPR SYM_SEMICOLON

ASSIGNMENT = SYM_IDENTIFIER SYM_ASSIGN EXPR

EXPR = TERM ADD_EXPRS

ADD_EXPRS = SYM_MINUS TERM ADD_EXPRS
          | SYM_PLUS TERM ADD_EXPRS
          | ε

TERM = FACTOR MUL_EXPRS

MUL_EXPRS = SYM_MODULO FACTOR MUL_EXPRS
          | SYM_ASTERISK FACTOR MUL_EXPRS
          | SYM_DIVISION FACTOR MUL_EXPRS
          | ε

FACTOR = SYM_INT
       | SYM_IDENTIFIER
       | SYM_LPAREN EXPR SYM_RPAREN

CONDITIONAL = SYM_IF CONDITION BLOCK ELSE
            | SYM_WHILE CONDITION BLOCK

ELSE = SYM_ELSE BLOCK
     | ε

CONDITION = SYM_LPAREN BOOL_EXPR SYM_RPAREN

BOOL_EXPR = EXPR LOGICAL_OP EXPR

LOGICAL_OP = SYM_EQ
           | SYM_NOT_EQ
           | SYM_LESSER
           | SYM_GREATER
           | SYM_LESSER_EQ
           | SYM_GREATER_EQ

SYM_IDENTIFIER = #"[a-zA-Z_][a-zA-Z0-9_]*"
SYM_LPAREN = "("
SYM_RPAREN = ")"
SYM_COMMA = ","
SYM_LBRACE = "{"
SYM_RBRACE = "}"
SYM_SEMICOLON = ";"
SYM_RETURN = "return"
SYM_PRINT = "print"
SYM_ASSIGN = "="
SYM_PLUS = "+"
SYM_MINUS = "-"
SYM_ASTERISK = "*"
SYM_DIVISION = "/"
SYM_MODULO = "%"
SYM_IF = "if"
SYM_WHILE = "while"
SYM_ELSE = "else"
SYM_EQ = "=="
SYM_NOT_EQ = "!="
SYM_LESSER = "<"
SYM_GREATER = ">"
SYM_LESSER_EQ = "<="
SYM_GREATER_EQ = ">="
SYM_INT_KW = "int"
SYM_VOID_KW = "void"
SYM_CHAR_KW = "char"
SYM_STRUCT_KW = "struct"
SYM_DOT = "."
SYM_LBRACKET = "["
SYM_RBRACKET = "]"
SYM_INT = #"-?[0-9]+"
SYM_CHAR = #"'[\p{ASCII}]'"
SYM_STRING = #"\".*\""
